buildscript {
    repositories {
		mavenCentral()
		jcenter()
    }

    dependencies {
		classpath 'com.android.tools.build:gradle:2.3.3'
    }
}

apply from: 'version.gradle'

ext {
	gitCommit = getGitCommit()
	buildDate = getDatestamp()
	sonatypeCredentialsAvailable = project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')
	isReleaseVersion = !isSnapshot
	signingRequired = isReleaseVersion
	sonatypeSnapshotUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
	sonatypeStagingUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
	// Returns only the date in yyyy-MM-dd format, as otherwise, with
	// hh:mm:ss information, the manifest files would change with every
	// build, causing unnecessary rebuilds.
	builtDate = (new java.text.SimpleDateFormat("yyyy-MM-dd")).format(new Date())
	oneLineDesc = 'A Java library for TLS pinning'
	androidProjects = [
		':java-pinning-aar'
	].collect{ project(it) }
	javaProjects = subprojects - androidProjects
	javaCompatibility = JavaVersion.VERSION_1_7
}

configure(javaProjects) {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'osgi'
	// We need to apply the 'maven' plugin here too, as otherwise the
	// dependencies of java-pinning-java7 won't be set correctly, e.g
	// the dependency on java-pinning-jar won't be set.
	apply plugin: 'maven'

	sourceCompatibility = javaCompatibility
	targetCompatibility = sourceCompatibility

	eclipse {
		classpath {
			downloadJavadoc = true
		}
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}

	uploadArchives {
		repositories {
			mavenDeployer {
				pom {
					project {
						packaging 'jar'
					}
				}
			}
		}
	}

	jar {
		manifest {
			attributes(
			'Implementation-Version': version,
			'Implementation-GitRevision': project.gitCommit,
			'Built-Date': project.buildDate,
			'Built-JDK': System.getProperty('java.version'),
			'Built-Gradle': gradle.gradleVersion,
			'Built-By': System.getProperty('user.name')
			)
		}
	}
}

allprojects {
	group = 'eu.geekplace.javapinning'
	version = shortVersion
	if (isSnapshot) {
		version += '-SNAPSHOT'
	}

	if (JavaVersion.current().isJava8Compatible()) {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}

}

subprojects {
	apply plugin: 'maven'
	apply plugin: 'signing'

	repositories {
		mavenCentral()
	}

	uploadArchives {
		repositories {
			mavenDeployer {
				if (signingRequired) {
					beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
				}
				repository(url: project.sonatypeStagingUrl) {
					if (sonatypeCredentialsAvailable) {
						authentication(userName: sonatypeUsername, password: sonatypePassword)
					}
				}
				snapshotRepository(url: project.sonatypeSnapshotUrl) {
					if (sonatypeCredentialsAvailable) {
						authentication(userName: sonatypeUsername, password: sonatypePassword)
					}
				}

				pom.project {
					name 'Java Pinning'
					description project.oneLineDesc
					url 'http://androidpinning.geekplace.eu'

					scm {
						url 'https://github.com/flowdalic/android-pinning'
						connection 'scm:git@github.com:flowdalic/android-pinning.git'
						developerConnection 'scm:git@github.com:flowdalic/android-pinning.git'
					}

					licenses {
						license {
							name 'The Apache Software License, Version 2.0'
							url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
							distribution 'repo'
						}
					}

					developers {
						developer {
							id 'flow'
							name 'Florian Schmaus'
						}
					}
				}
			}
		}
	}

	signing {
		required { signingRequired }
		sign configurations.archives
	}
}

gradle.taskGraph.whenReady { taskGraph ->
	if (signingRequired
		&& taskGraph.allTasks.any { it instanceof Sign }) {
		// Use Java 6's console to read from the console (no good for a CI environment)
		Console console = System.console()
		console.printf '\n\nWe have to sign some things in this build.\n\nPlease enter your signing details.\n\n'
		def password = console.readPassword('GnuPG Private Key Password: ')

		allprojects { ext.'signing.password' = password }

		console.printf '\nThanks.\n\n'
	}
}

def getGitCommit() {
	def dotGit = new File("$projectDir/.git")
	if (!dotGit.isDirectory()) return 'non-git build'

	def cmd = 'git describe --always --tags --dirty=+'
	def proc = cmd.execute()
	def gitCommit = proc.text.trim()
	assert !gitCommit.isEmpty()
	gitCommit
}

// Returns only the date in yyyy-MM-dd format, as otherwise, with
// hh:mm:ss information, the manifest files would change with every
// build, causing unnecessary rebuilds.
def getDatestamp() {
	def date = new Date()
	return date.format('yyyy-MM-dd')
}
